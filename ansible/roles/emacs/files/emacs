(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

(setq-default indent-tabs-mode nil)

;; install use-package if it's not already installed
(when (not (package-installed-p 'use-package))
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package-ensure)
(setq use-package-always-ensure t)

;; install and load spacemacs-theme
(use-package spacemacs-common
  :ensure spacemacs-theme
  :config (load-theme 'spacemacs-dark t))

;; some global settings
(setq column-number-mode t)
(global-hl-line-mode t)
(add-hook 'before-save-hook 'delete-trailing-whitespace)

(menu-bar-mode -1)
(setq scroll-conservatively 10000)

(use-package markdown-mode)

(use-package magit
  :bind ("C-x g" . 'magit-status)

  :config
  (setq magit-save-repository-buffers 'dontask)
  (add-hook 'after-save-hook 'magit-after-save-refresh-status t))

(use-package which-key
  :config (which-key-mode))

;; install ivy mode, swiper and counsel
(use-package counsel
  :bind
  ("C-s" . 'swiper)
  ("M-x" . 'counsel-M-x)

  :config
  (use-package smex)

  (ivy-mode)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "%d/%d) ")
  (setq ivy-initial-inputs-alist nil))

(use-package counsel-projectile
  :bind-keymap
  ("C-c p" . projectile-command-map)

  :bind
  ("C-c C-f" . #'counsel-projectile-find-file)
  ("C-c C-d" . #'counsel-projectile-find-dir)
  ("C-c C-a" . #'counsel-projectile-ag)

  :config
  ;; use projectile-mode instead of counsel-projectile-mode
  ;; the 'setq' statements do not seem to modify the counsel-*
  ;; version behaviour
  (projectile-mode)

  (setq projectile-completion-system 'ivy)
  (setq projectile-switch-project-action 'projectile-dired)
  (setq projectile-current-project-on-switch 'move-to-end)

  ;; open files and directories in other window
  (counsel-projectile-modify-action 'counsel-projectile-find-file-action '((default 2)))
  (counsel-projectile-modify-action 'counsel-projectile-find-dir-action '((default 2))))

;; override M-DEL to backward-delete-word instead of backward-kill-word
(defun backward-delete-word (arg)
  "Delete word backwards. Do this ARG times."
  (interactive "p")
  (delete-region (point) (progn (backward-word arg) (point))))

(global-set-key (kbd "M-DEL") 'backward-delete-word)

;; don't clobber the fs tree with backup and auto-saves
;; place them in system `temp` directory

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))